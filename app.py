import streamlit as st
import pandas as pd
import requests
from io import StringIO
import chardet

# === –ü–û–õ–ù–ê–Ø CSV-–°–°–´–õ–ö–ê –ù–ê–ü–†–Ø–ú–£–Æ (—Ä–∞–±–æ—á–∞—è!) ===
url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vRt6mkLcvtneR8oXZVq-NoLBqaK3Hublc8iVRNI7c_TVd3Wk00NeN9NJCCWFXxZyjy5kheBu2wu1kV7/pub?gid=0&single=true&output=csv"

# === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===
try:
    response = requests.get(url)
    response.raise_for_status()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
    detected = chardet.detect(response.content)
    encoding = detected['encoding'] or 'utf-8'
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = response.content.decode(encoding)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ pandas
    df = pd.read_csv(StringIO(text))
    
except Exception as e:
    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã.")
    st.write("–ü—Ä–æ–≤–µ—Ä—å:")
    st.write("- –¢–∞–±–ª–∏—Ü–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∫–∞–∫ CSV")
    st.write("- –°—Å—ã–ª–∫–∞ –≤ –∫–æ–¥–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–æ–π, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    st.code(f"URL: {url}")
    st.exception(e)
    st.stop()

# === –û–ß–ò–°–¢–ö–ê –ù–ê–ó–í–ê–ù–ò–ô –ö–û–õ–û–ù–û–ö ===
df.columns = df.columns.str.strip()

# === –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –ù–£–ñ–ù–´–• –ö–û–õ–û–ù–û–ö ===
required_columns = ['–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–û—Ç–¥–µ–ª', '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', '–°—Ä–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ (–¥–Ω–µ–π)', '–ü—É—Ç—å –∫ PDF']
missing = [col for col in required_columns if col not in df.columns]

if missing:
    st.error(f"‚ùå –í —Ç–∞–±–ª–∏—Ü–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing)}")
    st.write("–¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:")
    st.write(list(df.columns))
    st.write("üí° –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É Google –¢–∞–±–ª–∏—Ü—ã ‚Äî –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–Ω—ã–º–∏.")
    st.stop()

# === –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• ===
df = df.astype(str)

# –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
df['–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'] = pd.to_datetime(df['–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'], dayfirst=True, errors='coerce')

# –°—Ä–æ–∫ –≤ –¥–Ω—è—Ö
df['–°—Ä–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ (–¥–Ω–µ–π)'] = pd.to_numeric(df['–°—Ä–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ (–¥–Ω–µ–π)'], errors='coerce')

# –ê–∫—Ç—É–∞–ª—å–Ω–æ –¥–æ
df['–ê–∫—Ç—É–∞–ª—å–Ω–æ –¥–æ'] = df['–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'] + pd.to_timedelta(df['–°—Ä–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ (–¥–Ω–µ–π)'], unit='D')

# –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ?
today = pd.Timestamp.today()
df['–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'] = df['–ê–∫—Ç—É–∞–ª—å–Ω–æ –¥–æ'] < today

# –ï—Å—Ç—å PDF?
df['–ï—Å—Ç—å PDF'] = df['–ü—É—Ç—å –∫ PDF'].str.strip().notna() & (df['–ü—É—Ç—å –∫ PDF'].str.strip() != '') & (df['–ü—É—Ç—å –∫ PDF'].str.strip().str.lower() != 'nan')

# === –î–ê–®–ë–û–†–î ===
st.title("üìä –î–∞—à–±–æ—Ä–¥: –î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
total = len(df)
expired = df['–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'].sum()
missing_pdf = (~df['–ï—Å—Ç—å PDF']).sum()

col1, col2, col3 = st.columns(3)
col1.metric("–í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π", total)
col2.metric("–¢—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", expired, delta_color="inverse")
col3.metric("–ù–µ—Ç PDF", missing_pdf, delta_color="inverse")

# –§–∏–ª—å—Ç—Ä
show_expired = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ")
df_to_show = df[df['–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ']] if show_expired else df

# –¢–∞–±–ª–∏—Ü–∞
st.dataframe(
    df_to_show[[
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–û—Ç–¥–µ–ª', '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 
        '–ê–∫—Ç—É–∞–ª—å–Ω–æ –¥–æ', '–ï—Å—Ç—å PDF', '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'
    ]].style.applymap(
        lambda x: 'background-color: #ffe6e6' if x else '', subset=['–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ']
    )
)

# –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ—é –æ–±—ã—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É)
st.markdown("[‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü–µ](https://docs.google.com/spreadsheets/d/1Rt6mkLcvtneR8oXZVq-NoLBqaK3Hublc8iVRNI7c_TVd3Wk00NeN9NJCCWFXxZyjy5kheBu2wu1kV7/edit)")
